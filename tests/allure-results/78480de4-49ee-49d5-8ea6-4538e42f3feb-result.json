{"name": "test_add_jewelry_to_cart", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.product-name')).has text Blue and green Sneaker\n\nReason: AssertionError: actual text: Black & White Diamond Heart\nScreenshot: file://C:\\Users\\haidi\\.selene\\screenshots\\1726939137078\\1726939137078.png\nPageSource: file://C:\\Users\\haidi\\.selene\\screenshots\\1726939137078\\1726939137078.html", "trace": "fn = <selene.core.conditions.ElementCondition object at 0x000001F51956C4D0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selene\\core\\condition.py:174: in __call__\n    return self._fn(entity)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Element object at 0x000001F51956F110>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual text: Black & White Diamond Heart\n\n..\\venv\\Lib\\site-packages\\selene\\core\\condition.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nauth_with_api = 'D62DC1449D3FC7F544E0D359755305640618447192CD5F9CA690C56089B83A94A82011204016632D7A365B27A16D3932B86FBA2D827809539B3AA...62D9BE7BF714FEEFF12AB8CF2ACFE5CDFCE723339A0557E8CCF35C63EF0DF092C5C68DE1428183E0FA9A2586C25E53E11550DA2FB66409CD8D6A5C'\n\n    def test_add_jewelry_to_cart(auth_with_api):\n        with allure.step('Вход на сайт авторизованным пользователем'):\n            browser.open('/')\n            browser.driver.add_cookie({'name': 'NOPCOMMERCE.AUTH', 'value': auth_with_api})\n            browser.open('/')\n    \n        with allure.step('Проверка статуса добавления товара в корзину'):\n            response_code = add_product_to_cart(product_url='/addproducttocart/details/5/1', cookie=auth_with_api, data={\n                'product_attribute_5_7_1': 3\n            })\n            assert response_code == 200\n    \n        with allure.step('Переход в корзину'):\n            browser.element('.ico-cart .cart-label').click()\n    \n        with allure.step('Отображение товара в корзине'):\n>           browser.element('.product-name').should(have.text('Blue and green Sneaker'))\n\ntest_demoshop.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:132: in should\n    self.wait.for_(condition)\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.conditions.ElementCondition object at 0x000001F51956C4D0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.product-name')).has text Blue and green Sneaker\nE                   \nE                   Reason: AssertionError: actual text: Black & White Diamond Heart\nE                   Screenshot: file://C:\\Users\\haidi\\.selene\\screenshots\\1726939137078\\1726939137078.png\nE                   PageSource: file://C:\\Users\\haidi\\.selene\\screenshots\\1726939137078\\1726939137078.html\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "steps": [{"name": "Вход на сайт авторизованным пользователем", "status": "passed", "start": 1726939137702, "stop": 1726939141521}, {"name": "Проверка статуса добавления товара в корзину", "status": "passed", "steps": [{"name": "Добавление товара в корзину через API", "status": "passed", "attachments": [{"name": "Response", "source": "b559eb6e-dabe-4479-815b-7eba2b96258a-attachment.txt", "type": "text/plain"}], "start": 1726939141521, "stop": 1726939141941}], "start": 1726939141521, "stop": 1726939141942}, {"name": "Переход в корзину", "status": "passed", "start": 1726939141942, "stop": 1726939142494}, {"name": "Отображение товара в корзине", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.product-name')).has text Blue and green Sneaker\n\nReason: AssertionError: actual text: Black & White Diamond Heart\nScreenshot: file://C:\\Users\\haidi\\.selene\\screenshots\\1726939137078\\1726939137078.png\nPageSource: file://C:\\Users\\haidi\\.selene\\screenshots\\1726939137078\\1726939137078.html\n\n", "trace": "  File \"C:\\Users\\haidi\\PycharmProjects\\rest_API_part2\\tests\\test_demoshop.py\", line 41, in test_add_jewelry_to_cart\n    browser.element('.product-name').should(have.text('Blue and green Sneaker'))\n  File \"C:\\Users\\haidi\\PycharmProjects\\rest_API_part2\\venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 132, in should\n    self.wait.for_(condition)\n  File \"C:\\Users\\haidi\\PycharmProjects\\rest_API_part2\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\haidi\\PycharmProjects\\rest_API_part2\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1726939142494, "stop": 1726939146613}], "attachments": [{"name": "log", "source": "752e3496-5b30-4bf6-8993-6c0a7c2eaced-attachment.txt", "type": "text/plain"}], "start": 1726939137702, "stop": 1726939146636, "uuid": "a4d92f6c-ef8e-4632-832f-1d273b7db3cb", "historyId": "fcd6e466438bc7074b60b12d4ae3569b", "testCaseId": "fcd6e466438bc7074b60b12d4ae3569b", "fullName": "tests.test_demoshop#test_add_jewelry_to_cart", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_demoshop"}, {"name": "host", "value": "DESKTOP-PRFSCVB"}, {"name": "thread", "value": "32-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_demoshop"}]}